@using OrchardCore.Settings
@inject ISiteService SiteService;

<head>
    <style>
        .paging {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
        }
    </style>
</head>

<input hidden="hidden" id="siteName" value="@SiteService.GetSiteSettingsAsync().Result.SiteName"/>
<input hidden="hidden" id="pageSize" value="@SiteService.GetSiteSettingsAsync().Result.PageSize"/>
<input hidden="hidden" id="skip" value="0"/>
<table class="table table-striped" id="event-table">
    <thead>
    <tr>
        <th>@T["List.Table.Id"]</th>
        <th>@T["List.Table.FriendlyName"]</th>
        <th>@T["List.Table.PayloadType"]</th>
        <th>@T["List.Table.Status"]</th>
        <th>@T["List.Table.Created"]</th>
        <th>@T["List.Table.Processed"]</th>
    </tr>
    <tr>
        <th></th>
        <th></th>
        <th></th>
        <th>
            <select id="state">
                <option value="0">@T["List.State.Pending"]</option>
                <option value="1">@T["List.State.InProcessing"]</option>
                <option value="2">@T["List.State.Processed"]</option>
                <option value="3">@T["List.State.Failed"]</option>
                <option value="4">@T["List.State.Aborted"]</option>
            </select>
        </th>
        <th></th>
        <th></th>
    </tr>
    </thead>
    <tbody id="table-body">

    </tbody>
</table>
<div class="paging">
    <button type="button" onclick="pageBack()"><</button>
    <div id="page-display">1</div>
    <button type="button" onclick="pageForward()">></button>
</div>


<script>
    const noop = () => {};

    const pageSize = document.getElementById("pageSize");
    let skip = document.getElementById("skip");
    let page = 1;
    let pageDisplay = document.getElementById("page-display");

    
    const fetchEvents = async () => 
    {
    // TODO: Make dynamic from input
        const state = Number.parseInt(document.getElementById("state").value);
        const siteName = document.getElementById("siteName").value.toLowerCase(); 
        const result = await fetch(`/${siteName}/api/events/list?` + new URLSearchParams({
            take: Number.parseInt(document.getElementById("pageSize").value),
            skip: Number.parseInt(skip.value),
            state: state
        }),
        {
             headers: {
                  "Content-Type": "application/json; charset=utf-8",
                }
        });
        
        const resultAsJson = await result.json();
        
        const tableBody = document.getElementById("table-body"); 
        const newTableBody = document.createElement("tbody");
        newTableBody.id = "table-body";
        tableBody.parentNode.replaceChild(newTableBody, tableBody);
        
        for (const event of resultAsJson) {
            const row = document.createElement("tr");
            
            const id = document.createElement("td");
            id.innerText = event.eventId;
            
            const name = document.createElement("td");
            name.innerText = event.friendlyName;
            
            const type = document.createElement("td");
            type.innerText = event.payloadType;
            
            const status = document.createElement("td");
            status.innerText = event.status;
            
            const created = document.createElement("td");
            created.innerText = event.created;
            
            const processed = document.createElement("td");
            processed.innerText = event.processed;
            
            row.append(id,  name,  type,  status,  created, processed);
            
        
            newTableBody.append(row);
        }
    };
    
    const reset = () => {
        document.getElementById("state").value = "0";
        skip.value = 0;
    };
    
    fetchEvents({});
    
    setInterval(() => fetchEvents(), 5000);

const pageBack = () => {
        if (page === 1) return;
        page -= 1;
        pageDisplay.innerText = page;
        
        skip.value = Number.parseInt(skip.value) - Number.parseInt(pageSize.value);
        
        fetchEvents();
    }
    const pageForward = () => {
            page += 1;
            pageDisplay.innerText = page;
            
            skip.value = Number.parseInt(skip.value) + Number.parseInt(pageSize.value);
            
            fetchEvents();
    }


</script>