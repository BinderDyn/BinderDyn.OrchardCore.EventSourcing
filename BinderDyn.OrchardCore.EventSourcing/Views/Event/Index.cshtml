@model BinderDyn.OrchardCore.EventSourcing.ViewModels.EventTableViewModel
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using OrchardCore.Modules
@inject ILocalClock LocalClock

@{
    var nextPage = Model.CurrentPage + 1;
    var previousPage = Model.CurrentPage - 1;
}

<head>
    <style>
        .paging {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
        }
        .custom-tooltip {
          position: relative;
          opacity: 1 !important;
          display: inline-block;
        }
        
        .custom-tooltip .tooltiptext {
          visibility: hidden;
          width: 120px;
          background-color: #555;
          color: #fff;
          text-align: center;
          border-radius: 6px;
          padding: 5px 0;
          position: absolute;
          z-index: 1;
          bottom: 125%;
          left: 50%;
          margin-left: -60px;
          opacity: 1 !important;
          transition: opacity 0.3s;
        }
        
        .custom-tooltip .tooltiptext::after {
          content: "";
          position: absolute;
          top: 100%;
          left: 50%;
          margin-left: -5px;
          border-width: 5px;
          border-style: solid;
          border-color: #555 transparent transparent transparent;
        }
        
        .custom-tooltip:hover .tooltiptext {
          visibility: visible;
          opacity: 1;
        }
    </style>
</head>

<input hidden="hidden" id="baseUrl" value="@Model.BaseUrl"/>
<input hidden="hidden" id="currentPage" value="@Model.CurrentPage"/>
<table class="table table-striped" id="event-table">
    <thead>
    <tr>
        <th style="min-width: 395px">@T["List.Table.Id"]</th>
        <th>@T["List.Table.FriendlyName"]</th>
        <th style="min-width: 150px">@T["List.Table.PayloadType"]</th>
        <th>@T["List.Table.Status"]</th>
        <th>@T["List.Table.Created"]</th>
        <th>@T["List.Table.Processed"]</th>
    </tr>
    <tr>
        <th></th>
        <th></th>
        <th></th>
        <th>
            <form id="filter" asp-action="Index" asp-route-state="@Model.State" asp-route-page="1" method="get">
                <select id="state" asp-for="State" onchange="filterChanged()">
                    <option value="0">@T["List.State.Pending"]</option>
                    <option value="1">@T["List.State.InProcessing"]</option>
                    <option value="2">@T["List.State.Processed"]</option>
                    <option value="3">@T["List.State.Failed"]</option>
                    <option value="4">@T["List.State.Aborted"]</option>
                </select>
            </form>
        </th>
        <th></th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var eventData in Model.Events)
    {
        var createdLocal = (await LocalClock.ConvertToLocalAsync(eventData.Created)).LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        var processedLocal = eventData.Processed.HasValue ? (await LocalClock.ConvertToLocalAsync(eventData.Processed.Value)).LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss") : string.Empty;

        <tr>
            <td>@eventData.EventId</td>
            <td>@eventData.FriendlyName</td>
            <td>
                <div class="custom-tooltip">
                    @eventData.PayloadType
                    <span class="tooltiptext">@eventData.Payload</span>
                </div>
            </td>
            <td>@T[eventData.EventState.ToString()]</td>
            <td>@createdLocal</td>
            <td>@processedLocal</td>
        </tr>
    }
    </tbody>
</table>
<div class="paging">
    @if (Model.CurrentPage > 1)
    {
        <a type="button" asp-action="Index" asp-route-page="@previousPage" asp-route-state="@Model.State">
            <i class="fas fa-arrow-left"></i>
        </a>
    }
    <div id="page-display">@Model.CurrentPage / @Model.MaxPage</div>
    @if (Model.CurrentPage < Model.MaxPage)
    {
        <a type="button" asp-action="Index" asp-route-page="@nextPage" asp-route-state="@Model.State">
            <i class="fas fa-arrow-right"></i>
        </a>
    }

</div>


<script>
    const pageSize = document.getElementById("pageSize");
    let skip = document.getElementById("skip");
    let page = 1;
    let pageDisplay = document.getElementById("page-display");

    const reset = () => {
        document.getElementById("state").value = "0";
        skip.value = 0;
    };
    
    const filterChanged = async () => {
        const form = document.getElementById("filter");
        form.submit();
    }; 
</script>
<script asp-name="font-awesome" use-cdn="true"></script>